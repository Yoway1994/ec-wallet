// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"ec-wallet/configs"
	"ec-wallet/internal/domain/gorm_repo"
	"ec-wallet/internal/domain/stream"
	"ec-wallet/internal/domain/wallet"
	"ec-wallet/internal/infrastructure/cache"
	"ec-wallet/internal/infrastructure/database"
	"ec-wallet/internal/infrastructure/logger"
	"ec-wallet/internal/infrastructure/repository/gorm_repo"
	"ec-wallet/internal/infrastructure/stream"
	"ec-wallet/internal/infrastructure/wallet"
	"github.com/redis/go-redis/v9"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"sync"
)

// Injectors from wire.go:

func NewRepository() (gormrepo.Repo, error) {
	gormDB, err := NewDB()
	if err != nil {
		return nil, err
	}
	repo := gormRepoImpl.NewRepository(gormDB)
	return repo, nil
}

func NewWallet() (wallet.Wallet, error) {
	configsConfig := NewConfig()
	repo, err := NewRepository()
	if err != nil {
		return nil, err
	}
	walletWallet := walletservice.NewWalletService(configsConfig, repo)
	return walletWallet, nil
}

func NewStreamService() (stream.Stream, error) {
	client, err := NewRedisClient()
	if err != nil {
		return nil, err
	}
	streamStream := streamservice.NewStreamService(client)
	return streamStream, nil
}

// wire.go:

var db *gorm.DB

var dbOnce sync.Once

func NewDB() (*gorm.DB, error) {
	var err error
	if db == nil {
		dbOnce.Do(func() {
			db, err = database.PostgresqlConnection()
			if err != nil {
				return
			}
		})
	}
	return db, err
}

var config *configs.Config

var configOnce sync.Once

func NewConfig() *configs.Config {
	if config == nil {
		configOnce.Do(func() {
			config = configs.NewConfig()
		})
	}
	return config
}

var redisClient *redis.Client

var redisClientOnce sync.Once

func NewRedisClient() (*redis.Client, error) {
	var err error
	if redisClient == nil {
		redisClientOnce.Do(func() {
			redisClient, err = cache.NewRedisClient()
			if err != nil {
				return
			}
		})
	}
	return redisClient, nil
}

var zLog *zap.Logger

var zLogOnce sync.Once

func NewLogger() (*zap.Logger, error) {
	var err error
	if zLog == nil {
		zLogOnce.Do(func() {
			config2 := NewConfig()
			zLog = logger.NewLogger(config2)
		})
	}
	return zLog, err
}
